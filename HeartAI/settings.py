"""
Django settings for HeartAI project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import environ
import json
from django.core.exceptions import ImproperlyConfigured
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
env = environ.Env()
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))




# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'Users',
    'rest_framework',
    'UserVitals',
    'youtube_videos',
    'storages'

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'HeartAI.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'HeartAI.wsgi.application'

# Google Fit API Configuration
GOOGLE_CLIENT_ID = env('GOOGLE_CLIENT_ID')
GOOGLE_CLIENT_SECRET = env('GOOGLE_CLIENT_SECRET')

SECRETS_FILE_PATH = os.path.join(BASE_DIR, 'client_secrets.json')

# Dynamically create the client_secrets.json file ONLY if it doesn't exist
if not os.path.exists(SECRETS_FILE_PATH):
    try:
        # Structure the data as required by the Google client library
        client_secrets_data = {
            "web": {
                "client_id": GOOGLE_CLIENT_ID,
                "client_secret": GOOGLE_CLIENT_SECRET,
                "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                "token_uri": "https://accounts.google.com/o/oauth2/token",
                "redirect_uris": [
                    'https://heartai-backend-production-09ef.up.railway.app/vitals/callback/', 
                ]
            }
        }
        
        # Write the JSON data to the file
        with open(SECRETS_FILE_PATH, 'w') as f:
            json.dump(client_secrets_data, f, indent=4)
            
    except Exception as e:
        # Raise an exception if configuration fails
        raise ImproperlyConfigured(f"Could not create client_secrets.json: {e}") from e

# Set the settings variable to the generated file path
CLIENT_SECRETS_FILE = SECRETS_FILE_PATH

GOOGLE_FIT_REDIRECT_URI = 'https://heartai-backend-production-09ef.up.railway.app/vitals/callback/'  
GOOGLE_FIT_SCOPES = [
    'https://www.googleapis.com/auth/fitness.activity.read',
    'https://www.googleapis.com/auth/userinfo.email',
    'https://www.googleapis.com/auth/fitness.oxygen_saturation.read',
    'https://www.googleapis.com/auth/fitness.blood_pressure.read',
    'https://www.googleapis.com/auth/fitness.heart_rate.read',
    'openid'
]
# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": dj_database_url.config(default=env("DATABASE_URL"))
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'


CLOUDFARE_R2_BUCKET="heartai-r2"
CLOUDFARE_R2_ACCESS_KEY=env("CLOUDFARE_R2_ACCESS_KEY")
CLOUDFARE_R2_SECRET_KEY=env("CLOUDFARE_R2_SECRET_KEY")
CLOUDFARE_R2_BUCKET_ENDPOINT=env("CLOUDFARE_R2_BUCKET_ENDPOINT")
CLOUDFARE_R2_SIGNATURE_VERSION = 's3v4' 

AWS_STORAGE_BUCKET_NAME = CLOUDFARE_R2_BUCKET  
AWS_ACCESS_KEY_ID = CLOUDFARE_R2_ACCESS_KEY
AWS_SECRET_ACCESS_KEY = CLOUDFARE_R2_SECRET_KEY

# The critical setting to point to Cloudflare R2 instead of AWS S3
AWS_S3_ENDPOINT_URL = CLOUDFARE_R2_BUCKET_ENDPOINT 

# This R2-required signature version is correct.
AWS_S3_SIGNATURE_VERSION = 's3v4'
AWS_LOCATION = 'media'
AWS_DEFAULT_ACL = 'private'


MEDIA_URL = f'{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME}/{AWS_LOCATION}/'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
